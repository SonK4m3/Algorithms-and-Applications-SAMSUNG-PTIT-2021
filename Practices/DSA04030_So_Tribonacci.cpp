#include<iostream>
using namespace std;
#define ll long long
const ll mod = 1e15 + 7;
void multiply(ll T[4][4], ll M[4][4]){
	ll 	a, b, c, d, 
		e, f, g, h, 
		i, j, k, l, 
		m, n, o, p;
	a = (T[0][0] * M[0][0] +
		T[0][1] * M[1][0] +
		T[0][2] * M[2][0] +
		T[0][3] * M[3][0]) % mod;
	b = (T[0][0] * M[0][1] +
		T[0][1] * M[1][1] +
		T[0][2] * M[2][1] +
		T[0][3] * M[3][1]) % mod; 
	c = ( T[0][0] * M[0][2] +
		T[0][1] * M[1][2] +
		T[0][2] * M[2][2] +
		T[0][3] * M[3][2]) % mod;
	d = ( T[0][0] * M[0][3] +
		T[0][1] * M[1][3] +
		T[0][2] * M[2][3] +
		T[0][3] * M[3][3]) % mod;
	e = ( T[1][0] * M[0][0] +
		T[1][1] * M[1][0] +
		T[1][2] * M[2][0] +
		T[1][3] * M[3][0]) % mod;
	f = ( T[1][0] * M[0][1] +
		T[1][1] * M[1][1] +
		T[1][2] * M[2][1] +
		T[1][3] * M[3][1]) % mod;
	g = ( T[1][0] * M[0][2] +
		T[1][1] * M[1][2] +
		T[1][2] * M[2][2] +
		T[1][3] * M[3][2]) % mod;
	h = ( T[1][0] * M[0][3] +
		T[1][1] * M[1][3] +
		T[1][2] * M[2][3] +
		T[1][3] * M[3][3]) % mod;
	i = ( T[2][0] * M[0][0] +
		T[2][1] * M[1][0] +
		T[2][2] * M[2][0] +
		T[2][3] * M[3][0]) % mod;
	j = ( T[2][0] * M[0][1] +
		T[2][1] * M[1][1] +
		T[2][2] * M[2][1] +
		T[2][3] * M[3][1]) % mod;
	k = ( T[2][0] * M[0][2] +
		T[2][1] * M[1][2] +
		T[2][2] * M[2][2] +
		T[2][3] * M[3][2]) % mod;
	l = ( T[2][0] * M[0][3] +
		T[2][1] * M[1][3] +
		T[2][2] * M[2][3] +
		T[2][3] * M[3][3]) % mod;
	m = ( T[3][0] * M[0][0] +
		T[3][1] * M[1][0] +
		T[3][2] * M[2][0] +
		T[3][3] * M[3][0]) % mod;
	n = ( T[3][0] * M[0][1] +
		T[3][1] * M[1][1] +
		T[3][2] * M[2][1] +
		T[3][3] * M[3][1]) % mod;
	o = ( T[3][0] * M[0][2] +
		T[3][1] * M[1][2] +
		T[3][2] * M[2][2] +
		T[3][3] * M[3][2]) % mod;
	p = (T[3][0] * M[0][3] +
		T[3][1] * M[1][3] +
		T[3][2] * M[2][3] +
		T[3][3] * M[3][3]) % mod;
	
	T[0][0] = a; T[0][1] = b; T[0][2] = c; T[0][3] = d; 
	T[1][0] = e; T[1][1] = f; T[1][2] = g; T[1][3] = h;
	T[2][0] = i; T[2][1] = j; T[2][2] = k; T[2][3] = l;
	T[3][0] = m; T[3][1] = n; T[3][2] = o; T[3][3] = p;
}

void Power(ll T[4][4], ll n){
	if(n == 0 || n == 1)
		return;
	ll M[4][4] = {{1, 1, 0, 0}, {0, 1, 1, 1}, {0, 1, 0, 0}, {0, 0, 1, 0}};
	
	Power(T, n / 2);
	multiply(T, T);
	if(n % 2 == 1)
		multiply(T, M);
}

int Tribonacci(ll n){
	ll T[4][4] = {{1, 1, 0, 0}, {0, 1, 1, 1}, {0, 1, 0, 0}, {0, 0, 1, 0}};
	int F[3], C[3];
	F[1] = 1; F[2] = 3; F[3] = 6; C[1] = 1; C[2] = 2; C[3] = 3;
	if(n <= 3)
		return F[n];
	else 
		Power(T, n - 2);
	return (F[2]*T[0][0] + C[3]*T[0][1] + C[2]*T[0][2] + C[1]*T[0][3]) % mod;
}

int main(){
	int t;
	cin >> t;
	while(t--){	
		ll n;
		cin >> n;
		cout << Tribonacci(n) << endl;
	}
}
